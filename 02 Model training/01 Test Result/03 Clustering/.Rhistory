print(inner_join_df)
print(full_join_df)
print(semi_join_df)
print(anti_join_df)
df1 <- data.frame(id = c(1, 2, 3), value = c("a", "b", "c"))
df2 <- data.frame(id = c(3, 4, 5), value = c("c", "d", "e"))
union_df <- union(df1, df2)
intersect_df <- intersect(df1, df2)
setdiff_df_1_2 <- setdiff(df1, df2)
setdiff_df_2_1 <- setdiff(df2, df1)
print(union_df)
print(intersect_df)
print(setdiff_df_1_2)
print(setdiff_df_2_1)
movie_url <- "https://www.imdb.com/chart/top/"
raw_html <- read_html(movie_url)
movies_li <- raw_html |> html_nodes("li")
titles <- movies_li |> html_nodes("h3") |> html_text() |> str_split_i(pattern = "\\.", i = 2) |> str_trim()
ratings <- test <- movies_li |> html_elements("span.ipc-rating-star") |> html_text()
ratings <- ratings[ratings != "Rate"] |> str_split_i("\\s", i = 1) |> as.double()
release_years <- movies_li |> html_elements("div.sc-b0691f29-7.hrgukm.cli-title-metadata span:first-child") |> html_text() |> as.integer()
movies <- data.frame("titles" = titles, "ratings" = ratings, "years" = release_years)
movies |> head(10)
# 1) Extract phone no.
first_text <- "Please call us at 123-456-7890 or 555-555-5555."
phone_pattern <- "\\d{3}-\\d{3}-\\d{4}"
str_extract_all(first_text, phone_pattern)
# 2) Extract email addr
second_text <- "Contact us at info@example.com or support@example.com."
email_pattern <- "\\w+@\\w+.\\w+"
str_extract_all(second_text, email_pattern)
# 3) Replace URLs with string "URL"
third_text <- "Check out our website at https://www.example.com and our blog at https://blog.example.com."
url_pattern <- "http(s)?://\\w+.\\w+.\\w+"
# str_extract_all(third_text, url_pattern)
str_replace_all(third_text, url_pattern, "URL")
date_data <- data.frame(date_time = c("2023-02-22 7:30:15", "2023-02-23 12:15:30", "2023-02-24 23:59:59"))
date_time_lub <- ymd_hms(date_data$date_time)
date_data <- date_data |> mutate(date = as.Date(date_time_lub), time = format(date_time_lub, "%T"))
print(date_data)
wiki_url <- "https://en.wikipedia.org/wiki/Data_science"
raw_html <- read_html(wiki_url) |> html_element("#bodyContent")
first_para <- raw_html |> html_nodes("p")
first_para_text <- first_para[[2]] |> html_text()
print(first_para_text)
wiki_url <- "https://en.wikipedia.org/wiki/Data_science"
raw_html <- read_html(wiki_url) |> html_element("#bodyContent")
img_url <- raw_html |> html_element("figure.mw-default-size") |>  html_node("img") |> html_attr("src")
img_url <- paste("https:", img_url, sep = "")
print(img_url)
wiki_hk_url <- "https://en.wikipedia.org/wiki/Hong_Kong"
raw_html <- read_html(wiki_hk_url)
table_li <- raw_html |> html_nodes("table")
climate_table <- table_li[[6]] |> html_table()
climate_table <- climate_table |> setNames(unname(as.vector(climate_table[1,]))) |> rename("Measurement" = Month)
print(climate_table)
data(trump_tweets)
trump_tweets |> count(source) |> arrange(desc(n)) |> head()
tweets_android_iphone <- trump_tweets |> extract(source, "source", "Twitter for (.*)") |> filter(source %in% c("Android", "iPhone") & !is_retweet )
tweets_android_iphone |> mutate(hour = hour(with_tz(created_at, "EST"))) |> count(source, hour) |> group_by(source) |> mutate(percent = n / sum(n)) |> ungroup() |> ggplot(aes(hour, percent * 100, color = source)) + geom_line()  + labs(title = "Percent of tweets from Android and iPhone for every hour of day", x = "Hour of day (EST)", y = "Average % of tweets", color = "")
# tweets_android_iphone |> ggplot(aes(x = created_at, y = source))
# Do it includeu the links of IMAGES???
links_p <- "http(s)?://t.co/[A-Za-z\\d]+"
word_freq <- trump_tweets |> mutate(text = str_replace_all(text, links_p, "")) |> unnest_tokens(word, text) |> filter(!word %in% stop_words$word) |> count(word) |> top_n(20, n) |> arrange(desc(n))
print(word_freq)
word_freq |> mutate(word = reorder(word, n)) |> ggplot(aes(x= word, y = n)) +  geom_col() + coord_flip() + labs(y = "Frequency", x = "Words", title = "Top 20 Words in Trump's Tweets")
library(gutenbergr)
data(gutenberg_metadata)
books <- gutenberg_metadata
# 1) first 6th rows
books |> head(6)
# 2) number of observations (rows) and variables (columns)
print("rows  columns:")
books |> dim()
print("")
# 3) names of all variables in `books`
print("names of all variables in `books`:")
names(books)
books_top_author <- books |> filter(!is.na(author) & !author %in% c("Various", "Anonymous")) |> count(author) |> arrange(desc(n))
books_top_author |> top_n(1, n)
# Is Translation handled? --> i.e., "en" only OR "en/??"
# whether to include en/fr when English works are requested
shakespeare_books <- books |> filter(author == "Shakespeare, William" & language == "en")
shakespeare_books |> head(6)
shakespeare_hamlet <- shakespeare_books |> filter(title == "Hamlet") |> select(gutenberg_id, title, author) |> slice(1)
hamlet_text <- gutenberg_download(shakespeare_hamlet$gutenberg_id)
hamlet_data <- left_join(shakespeare_hamlet, hamlet_text)
hamlet_data <- hamlet_data |> filter(text != "") |> mutate(text = str_to_lower(text))
hamlet_data |> head()
library(tidytext)
library(textdata)
hamlet_sentiments <- get_sentiments("afinn")
hamlet_words <- hamlet_data |> unnest_tokens(word, text) |> anti_join(stop_words, by = "word") |> inner_join(hamlet_sentiments, by = "word") |> count(word, value, sort = TRUE)
hamlet_words |> head()
hamlet_top_words <- hamlet_words |> group_by(value) |> top_n(1, n) |> arrange(desc(n))
print(hamlet_top_words)
hamlet_top_words |>  ggplot(aes(x = reorder(word, n, decreasing = TRUE), y = n)) + geom_col() + labs(title = "Top 1 most common word for each group by value", x = "words", y = "Count")
library(tidyverse)
df <- read_csv("/Users/idea/Documents/FYP/02 Model training/DBSCAN_hyperparam.csv")
names(df)
df |> head()
library(ggplot2)
df |> ggplot(aes(x = `_clusters`, y = sil_score)) + geom_line()
df |> arrange(desc(sil_score))
df |> ggplot(aes(x = ...1)) + geom_line(aes(y = sil_score)) + geom_line(aes(y = davies_score))
df |> ggplot(aes(x = ...1)) + geom_line(aes(y = sil_score, color = red)) + geom_line(aes(y = davies_score, color = blue))
df |> ggplot(aes(x = ...1)) + geom_line(aes(y = sil_score) color = red) + geom_line(aes(y = davies_score) color = blue)
df |> ggplot(aes(x = ...1)) + geom_line(aes(y = sil_score) color = red) + geom_line(aes(y = davies_score), color = blue)
df |> ggplot(aes(x = ...1)) + geom_line(aes(y = sil_score), color = red) + geom_line(aes(y = davies_score), color = blue)
df |> ggplot(aes(x = ...1)) + geom_line(aes(y = sil_score)) + geom_line(aes(y = davies_score))
df |> ggplot(aes(x = ...1)) + geom_line(aes(y = sil_score), color = "red") + geom_line(aes(y = davies_score), color = "blue")
df |> ggplot(aes(x = ...1)) + geom_line(aes(y = sil_score), color = "red") + geom_line(aes(y = davies_score), color = "blue") + legend()
df |> ggplot(aes(x = ...1)) + geom_line(aes(y = sil_score), color = "red") + geom_line(aes(y = davies_score), color = "blue") + legend("red" = "sil_score", "blue" = "davies_score")
df |> ggplot(aes(x = ...1)) + geom_line(aes(y = sil_score), color = "red") + geom_line(aes(y = davies_score), color = "blue") + legend("sil_score" = "red", "davies_score" = "red")
df |> ggplot(aes(x = ...1)) + geom_line(aes(y = sil_score), color = "red") + geom_line(aes(y = davies_score), color = "blue") + legend(legend = c("sil_score", "davies_scores"))
df |> ggplot(aes(x = ...1)) + geom_line(aes(y = sil_score), color = "red") + geom_line(aes(y = davies_score), color = "blue") + legend(x="topLeft", legend = c("sil_score", "davies_scores"))
df |> ggplot(aes(x = ...1)) + geom_line(aes(y = sil_score), color = "red") + geom_line(aes(y = davies_score), color = "blue")
df |> arrange(davies_score) |> head()
df |> arrange(desc(sil_score)) |> head()
df |> arrange(desc(sil_score), davies_score) |> head()
library(tidyverse)
library(ggplot2)
cd
hsdbcan <- read_csv("/Users/idea/Documents/FYP/02 Model training/HDBSCAN_hyperparam.csv")
names(hsdbcan)
hsdbcan <- select(hsdbcan, -...1)
names(hsdbcan)
hsdbcan |> head()
hsdbcan |> pivot_longer(`min_cluster_size`:`min_samples`, names_to = "measurement")
hsdbcan |> pivot_longer(`min_cluster_size`:`min_samples`)
hsdbcan |> pivot_longer(`min_cluster_size`:`min_samples`) |> head()
hsdbcan |> pivot_longer(`min_cluster_size`:`min_samples`, names_to = "Measurement") |> head()
hsdbcan |> ggplot(aes(x = min_cluster_size, y = sil_score)) + geom_line()
hsdbcan |> top_n(sil_score)
hsdbcan |> top_n(1, sil_score)
hsdbcan |> top_n(1, sil_score) |> group_by(sil_score) |> summarise(minSize = min(min_cluster_size), maxSize = max(min_cluster_size))
hsdbcan |> filter(between(min_cluster_size, 345, 595) |> head()
hsdbcan |> filter(between(min_cluster_size, 345, 595)) |> head()
hsdbcan |> filter(between(min_cluster_size, 345, 595)) |> head()
hsdbcan |> top_n(1, sil_score) |> group_by(sil_score) |> summarise(minSize = min(min_cluster_size), maxSize = max(min_cluster_size), minSample = min(min_samples), maxSample = max(min_samples))
hsdbcan |> filter(between(min_cluster_size, 345, 595) & min_samples == 9) |> head()
hsdbcan |> filter(between(min_cluster_size, 345, 595) & min_samples == 9) |> select(stats) |> head()
hsdbcan |> filter(between(min_cluster_size, 345, 595) & min_samples == 9) |> select(outliners) |> head()
hsdbcan |> top_n(-1, davies_score) |> group_by(davies_score) |> summarise(minSize = min(min_cluster_size), maxSize = max(min_cluster_size), minSample = min(min_samples), maxSample = max(min_samples))
hsdbcan |> top_n(1, sil_score) |> group_by(sil_score) |> summarise(minSize = min(min_cluster_size), maxSize = max(min_cluster_size), minSample = min(min_samples), maxSample = max(min_samples))
hsdbcan |> filter(between(min_cluster_size, 345, 595) & between( min_samples, 2, 9)) |> ggplot(aes(x = min_samples)) + geom_line(aes(y = sil_score)) + geom_line(aes(y = davies_score))
hsdbcan |> filter(between(min_cluster_size, 345, 595) & between( min_samples, 2, 9)) |> ggplot(aes(x = min_samples)) + geom_line(aes(y = sil_score), color = "blue") + geom_line(aes(y = davies_score), color = "red")
hsdbcan |> filter(between(min_cluster_size, 345, 595) & between( min_samples, 2, 9)) |> ggplot(aes(x = min_cluster_size)) + geom_line(aes(y = sil_score), color = "blue") + geom_line(aes(y = davies_score), color = "red")
hsdbcan |> top_n(1, sil_score) |> group_by(sil_score) |> summarise(minDavies = min(davies_score), minSize = min(min_cluster_size), maxSize = max(min_cluster_size), minSample = min(min_samples), maxSample = max(min_samples))
hsdbcan |> filter(between(min_cluster_size, 345, 595) & between( min_samples, 2, 9)) |> ggplot(aes(x = min_cluster_size)) + geom_line(aes(y = sil_score), color = "blue") + geom_line(aes(y = davies_score), color = "red")
hsdbcan |> filter(between(min_cluster_size, 345, 595) & between( min_samples, 2, 9)) |> ggplot(aes(x = min_samples)) + geom_line(aes(y = sil_score), color = "blue") + geom_line(aes(y = davies_score), color = "red")
hsdbcan |> top_n(1, sil_score) |> group_by(sil_score) |> summarise(minDavies = min(davies_score), minSize = min(min_cluster_size), maxSize = max(min_cluster_size), minSample = min(min_samples), maxSample = max(min_samples))
hsdbcan |> top_n(1, sil_score) |> group_by(sil_score) |> filter(davies_score <= 0.989) |> head()
hsdbcan |> top_n(1, sil_score) |> group_by(sil_score) |> filter(davies_score <= 0.989) |> head()
hsdbcan |> top_n(1, sil_score) |> group_by(sil_score) |> filter(davies_score <= 0.989)
hsdbcan |> top_n(1, sil_score) |> group_by(sil_score) |> filter(davies_score <= 0.989 & `_clusters` != 2)
eth_data <- read_csv("/Users/idea/Documents/FYP/02 Model training/combined_fix_bug.csv")
names(eth_data)
eth_data |> select(-c(index, address))
eth_data |> select(-c(index, address)) |> names()
eth_data_filtered <- eth_data |> select(-c(index, address)) |> names()
names(eth_data_filtered)
eth_data_filtered <- eth_data |> select(-c(index, address))
names(eth_data_filtered)
str(eth_data_filtered)
class(eth_data_filtered$flag)
factor(eth_data_filtered$flag)
eth_data_filtered <- eth_data_filtered |> mutate(flag = factor(flag))
class(eth_data_filtered$flag)
eth_data_filtered |> ggplot(aes(x = transactionCount, col = flag)) + geom_density()
eth_data_filtered |> group_by(flag) |> ggplot(aes(x = transactionCount, fill = flag)) + geom_density()
eth_data_filtered |> group_by(flag) |> ggplot(aes(x = transactionCount, fill = flag)) + geom_density() + scale_x_log10()
eth_data_filtered |> filter(!is.na(transactionCount)) |>  group_by(flag) |> ggplot(aes(x = transactionCount, fill = flag)) + geom_density() + scale_x_log10()
eth_data_filtered |> filter(!is.na(transactionCount)) |>  group_by(flag) |> ggplot(aes(x = transactionCount, fill = flag)) + geom_density() + scale_x_continuous(trans = "log100")
class(eth_data_filtered$firstTransactionTime)
eth_data_filtered$firstTransactionTime |> head()
eth_data_filtered$firstTransactionTime.slice(1)
eth_data_filtered |> select(firstTransactionTime, lastTransactionTime) |> slice(1)
eth_data_filtered |> select(firstTransactionTime, lastTransactionTime) |> slice(1) |> mutate(test = as.Date(firstTransactionTime))
library(lubridate)
eth_data_filtered |> select(firstTransactionTime, lastTransactionTime) |> slice(1) |> mutate(test = as_date(as_datetime(firstTransactionTime)))
eth_data_filtered |> select(firstTransactionTime, lastTransactionTime) |> slice(1) |> mutate(test = as_date(as_datetime(firstTransactionTime/1000)))
eth_data_filtered |> select(firstTransactionTime, lastTransactionTime) |> slice(1) |> mutate(test = as_date(ymd_hms(firstTransactionTime/1000)))
eth_data_filtered |> select(firstTransactionTime, lastTransactionTime) |> slice(1) |> mutate(test = ymd_hms(as_datetime(firstTransactionTime/1000)))
eth_tx_timestamp <- read_csv("/Users/idea/Documents/FYP/01 Data  Collection/01 Data Collected/03 check/transactionTime副本3.csv")
eth_tx_timestamp <- read_csv("/Users/idea/Documents/FYP/01 Data  Collection/01 Data Collected/03 check/transactionTime 副本3.csv")
transactionTime副本3
eth_tx_timestamp <- read_csv("/Users/idea/Documents/FYP/01 Data  Collection/01 Data Collected/03 check/transactionTime_test.csv")
eth_tx_timestamp <- read_csv("/Users/idea/Documents/FYP/01 Data Collection/01 Data Collected/03 check/transactionTime_test.csv")
eth_tx_timestamp |> head()
eth_tx_timestamp |> mutate(firstTx = ymd_hms(as_datetime(firstTransactionTime/1000)), lastTx = ymd_hms(as_datetime(lastTransactionTime/1000))) |> head()
eth_tx_timestamp |> mutate(firstTx = ymd_hms(as_datetime(firstTransactionTime/1000)), lastTx = ymd_hms(as_datetime(lastTransactionTime/1000))) |> head()
eth_tx_date <- eth_tx_timestamp |> mutate(firstTx = ymd_hms(as_datetime(firstTransactionTime/1000)), lastTx = ymd_hms(as_datetime(lastTransactionTime/1000)))
eth_tx_date |> head()
str(eth_tx_date)
class(eth_tx_date$firstTx)
as.Date(eth_tx_date$firstTx)
rowid_to_column(eth_tx_date, "index")
eth_tx_date <- rowid_to_column(eth_tx_date, "index")
eth_tx_date
inner_join(eth_data, eth_tx_date, by = "index")
inner_join(eth_data, eth_tx_date, by = "index") |> select(firstTransactionTime)
inner_join(eth_data, eth_tx_date, by = "index") |> select(first_Tx)
test <- inner_join(eth_data, eth_tx_date, by = "index")
test$firstTransactionTime.x
test$firstTransactionTime.y
test$firstTx
eth_data_real_date <- inner_join(eth_data, eth_tx_date, by = "index")
eth_data_real_date |> select(-c(firstTransactionTime.x, lastTransactionTime.x))
eth_data_real_date <- eth_data_real_date |> select(-c(firstTransactionTime.x, lastTransactionTime.x))
class(eth_data_real_date$flag)
eth_data_real_date <- eth_data_real_date |> mutate(flag = factor(flag))
eth_data_real_date |> group_by(flag), ggplot(aes(firstTx, fill = flag)) + geom_density()
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density()
eth_data_real_date |> group_by(flag) |> ggplot(aes(lastTx, fill = flag)) + geom_density()
eth_data_real_date |> group_by(flag) |> ggplot(aes(lastTx, fill = flag)) + geom_density(alpha = 0.7)
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.7)
eth_data_real_date |> group_by(flag) |> ggplot(aes(lastTx, fill = flag)) + geom_density(alpha = 0.7)
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density")
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density") + scale_y_log10()
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density")
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx), fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density")
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx), fill = flag) + geom_density(alpha = 0.7) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density")
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density")
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, ..scaled.., fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density")
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, after_stat(scaled), fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density")
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density")
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, after_stat(scaled), fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density")
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density")
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", name = "Account Types")
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types")
library(ggthemes)
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types") + theme_economist()
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types") + theme_fivethirtyeight()
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types") + theme_fivethirtyeight(plot.title = element_text(size = 16))
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types") + theme_fivethirtyeight() +theme(plot.title = element_text(size = 16))
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types") + theme_fivethirtyeight() +theme(plot.title = element_text(size = 12))
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types") + theme_fivethirtyeight() +theme(plot.title = element_text(size = 14))
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types")
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types")  + scale_fill_continuous(trans= "reverse")
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types")  + scale_fill_discrete(trans= "reverse")
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.6) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types")  + scale_color_manual(values = c("blue", "red"))
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.6) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types")  + scale_color_manual(values = c("red", "blue"))
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.6) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types")  + scale_fill_manual(values = c("red", "blue"))
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.6) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D"))
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.6) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types")  + scale_fill_manual(trans = "reverse")
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.6) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D"))
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.6) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTransactionTime.y, fill = flag)) + geom_density(alpha = 0.6) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
eth_data_real_date |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.6) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
eth_data_real_date |> group_by(flag) |> ggplot(aes(lastTx, fill = flag)) + geom_density(alpha = 0.6) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
eth_data_real_date |> group_by(flag) |> ggplot(aes(lastTx, fill = flag)) + geom_density(alpha = 0.6) + labs(title = "Distribution of Last Transaction time by Types of account", x = "Last Transaction Time", y = "Density", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
eth_data_real_date |> group_by(flag) |> ggplot(aes(x = flag, y = total_transaction_count, fill = flag)) + geom_boxplot() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
eth_data_real_date |> group_by(flag) |> ggplot() + geom_boxplot(aes(x = flag, y = total_transaction_count, fill = flag)) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
eth_data_real_date |> group_by(flag) |> ggplot() + geom_boxplot(aes(x = flag, y = total_transaction_count, fill = flag)) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) +scale_y_log10() + theme(legend.position = "bottom")
eth_data_real_date |> group_by(flag) |> ggplot() + geom_boxplot(aes(x = flag, y = total_transaction_count, fill = flag)) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + scale_y_log10() + coord_flip() + theme(legend.position = "bottom")
eth_data_real_date |> group_by(flag) |> ggplot(aes(x = flag, y = total_transaction_count, fill = flag)) + geom_boxplot(alpha = 0.6) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + scale_y_log10() + coord_flip() + theme(legend.position = "bottom")
eth_data_real_date |> group_by(flag) |> ggplot(aes(x = flag, y = total_transaction_count, fill = flag)) + geom_boxplot() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + scale_y_log10() + coord_flip() + theme(legend.position = "bottom")
eth_data_real_date |> group_by(flag) |> ggplot(aes(x = flag, y = total_transaction_count, fill = flag)) + geom_density(alpha = 0.5) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + scale_y_log10() + coord_flip() + theme(legend.position = "bottom")
eth_data_real_date |> group_by(flag) |> ggplot(aes(x = flag, y = total_transaction_count, fill = flag)) + geom_density(alpha = 0.5) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D"))  + theme(legend.position = "bottom")
eth_data_real_date |> group_by(flag) |> ggplot(aes(x = flag, y = total_transaction_count, fill = flag)) + geom_boxplot() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + scale_y_log10() + coord_flip() + theme(legend.position = "bottom")
eth_data_real_date |> group_by(flag) |> ggplot(total_transaction_count, fill = flag)) + geom_density() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
eth_data_real_date |> group_by(flag) |> ggplot(total_transaction_count, fill = flag) + geom_density() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
eth_data_real_date |> group_by(flag) |> ggplot(total_transaction_count, fill = flag) + geom_density() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
eth_data_real_date |> group_by(flag) |> ggplot(aes(total_transaction_count), fill = flag) + geom_density() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
eth_data_real_date |> group_by(flag) |> ggplot(aes(x = flag, y = total_transaction_count, fill = flag)) + geom_boxplot() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + scale_y_log10() + coord_flip() + theme(legend.position = "bottom")
eth_data_real_date |> group_by(flag) |> ggplot(aes(x = flag, y = sendAmount, fill = flag)) + geom_boxplot() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + scale_y_log10() + coord_flip() + theme(legend.position = "bottom")
eth_data_real_date |> group_by(flag) |> ggplot(aes(x = flag, y = sendAmount, fill = flag)) + geom_boxplot(alpha = 0.7) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + scale_y_log10() + coord_flip() + theme(legend.position = "bottom")
eth_data_real_date |> names()
write.csv(eth_data_real_date, "/Users/idea/Documents/FYP/01 Data Collection/04 Final Usable Data/eth_data_real_date.csv")
eth_data_real_date |> group_by(flag) |> ggplot(aes(x = flag, y = sendAmount, fill = flag)) + geom_boxplot(alpha = 0.7) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + scale_y_log10() + coord_flip() + theme(legend.position = "bottom")
source("~/Documents/FYP/01 Data Collection/04 Final Usable Data/test.R", echo=TRUE)
source("~/Documents/FYP/01 Data Collection/04 Final Usable Data/test.R", echo=TRUE)
eth_data_test |> names()
eth_data_real_date |> group_by(flag) |> ggplot(aes(x = flag, y = sendAmount, fill = flag)) + geom_boxplot(alpha = 0.7) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + scale_y_log10() + coord_flip() + theme(legend.position = "bottom")
eth_data_real_date |> rename(firstTransactionTime = firstTransactionTime.y, lastTransactionTime = lastTransactionTime.y)
eth_data_real_date <- eth_data_real_date |> rename(firstTransactionTime = firstTransactionTime.y, lastTransactionTime = lastTransactionTime.y)
write.csv(eth_data_real_date, "/Users/idea/Documents/FYP/01 Data Collection/04 Final Usable Data/eth_data_real_date.csv")
eth_data_test <- read_csv("/Users/idea/Documents/FYP/01 Data Collection/04 Final Usable Data/eth_data_real_date.csv")
eth_data_test |> group_by(flag) |>
ggplot(aes(x = flag, y = sendAmount, fill = flag)) +
geom_boxplot(alpha = 0.7) +
labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  +
scale_fill_manual(values = c("#0DBFC4", "#F8786D")) +
scale_y_log10() + coord_flip() + theme(legend.position = "bottom")
class(eth_data_test$flag)
class(eth_data_real_date$flag)
source("~/Documents/FYP/01 Data Collection/04 Final Usable Data/test.R", echo=TRUE)
eth_data_real_date |> group_by(flag) |> ggplot(aes(x = flag, y = total_transaction_count, fill = flag)) + geom_boxplot() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + scale_y_log10() + coord_flip() + theme(legend.position = "bottom")
source("~/Documents/FYP/01 Data Collection/04 Final Usable Data/test.R", echo=TRUE)
ggarange()
?ggarrange
library(gridExtra)
source("~/Documents/FYP/01 Data Collection/04 Final Usable Data/test.R", echo=TRUE)
source("~/Documents/FYP/01 Data Collection/04 Final Usable Data/test.R", echo=TRUE)
source("~/Documents/FYP/01 Data Collection/04 Final Usable Data/test.R", echo=TRUE)
eth_data_real_date |> group_by(flag) |> ggplot(total_transaction_count, fill = flag) + geom_density() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
eth_data_real_date |> group_by(flag) |> ggplot(aes(total_transaction_count, flag), fill = flag) + geom_density() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
eth_data_real_date |> group_by(flag) |> ggplot(aes(total_transaction_count, flag), fill = flag) + geom_density() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") +scale_x_log10()
eth_data_real_date |> group_by(flag) |> ggplot(aes(total_transaction_count, flag), fill = flag) + geom_density() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") +scale_y_log10()
eth_data_real_date |> group_by(flag) |> ggplot(aes(total_transaction_count, flag), fill = flag) + geom_density() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") +scale_x_log10()
eth_data_real_date |> ggplot(aes(total_transaction_count, flag), fill = flag) + geom_density() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") +scale_x_log10()
library(ggridges)
eth_data_real_date |> ggplot(aes(total_transaction_count, flag), fill = flag) + geom_density_ridges() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") +scale_x_log10()
eth_data_real_date |> group_by(flag) |> head()
eth_data_real_date |> ggplot(aes(total_transaction_count, flag), fill = flag) + geom_histogram() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") +scale_x_log10()
eth_data_real_date |> ggplot(aes(total_transaction_count, flag), fill = flag) + geom_histogram() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
eth_data_real_date |> ggplot(aes(total_transaction_count), fill = flag) + geom_histogram() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
eth_data_real_date |> ggplot(aes(total_transaction_count), fill = flag) + geom_histogram() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") + scale_x_log10()
eth_data_real_date |> group_by(flag) |> ggplot(aes(total_transaction_count), fill = flag) + geom_histogram() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") + scale_x_log10()
eth_data_real_date |> group_by(flag) |> ggplot(aes(total_transaction_count), fill = flag) + geom_histogram() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") + scale_x_log10() + facet_grid(.~flag)
eth_data_real_date |> group_by(flag) |> ggplot(aes(total_transaction_count), fill = flag) + geom_histogram(binwidth = 1) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") + scale_x_log10() + facet_grid(.~flag)
class(eth_data_real_date$flag)
eth_data_real_date |> group_by(flag) |> ggplot(aes(total_transaction_count, fill = flag)) + geom_histogram(binwidth = 1) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") + scale_x_log10() + facet_grid(.~flag)
eth_data_real_date |> group_by(flag) |> ggplot(aes(total_transaction_count, fill = flag)) + geom_histogram(binwidth = 10) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") + scale_x_log10() + facet_grid(.~flag)
eth_data_real_date |> group_by(flag) |> ggplot(aes(total_transaction_count, fill = flag)) + geom_histogram(binwidth = 1, bins = 20) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") + scale_x_log10() + facet_grid(.~flag)
eth_data_real_date |> group_by(flag) |> ggplot(aes(total_transaction_count, fill = flag)) + geom_histogram(binwidth = 1, bins = 20) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") + scale_x_log10()
eth_data_real_date |> group_by(flag) |> ggplot(aes(total_transaction_count, fill = flag)) + geom_histogram(binwidth = 1, bins = 50) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") + scale_x_log10()
eth_data_real_date |> group_by(flag) |> ggplot(aes(total_transaction_count, fill = flag)) + geom_histogram(binwidth = 1, bins = 30) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") + scale_x_log10()
eth_data_real_date |> group_by(flag) |> ggplot(aes(total_transaction_count, fill = flag)) + geom_histogram(binwidth = 0.5, bins = 30) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") + scale_x_log10()
eth_data_real_date |> group_by(flag) |> ggplot(aes(total_transaction_count, fill = flag)) + geom_histogram(binwidth = 0.5, bins = 30, alpha = 0.6) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") + scale_x_log10()
eth_data_real_date |> group_by(flag) |> ggplot(aes(total_transaction_count, fill = flag)) + geom_histogram(binwidth = 0.5, bins = 30, alpha = 0.8) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") + scale_x_log10()
eth_data_real_date |> group_by(flag) |> ggplot(aes(total_transaction_count, fill = flag)) + geom_histogram(binwidth = 0.5, bins = 30) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") + scale_x_log10()
eth_data_real_date |> group_by(flag) |> ggplot(aes(total_transaction_count, fill = flag)) + geom_histogram(binwidth = 0.5, bins = 30) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") + scale_x_log10() + facet_grid(. ~ flag)
eth_data_real_date |> group_by(flag) |> ggplot(aes(total_transaction_count, fill = flag)) + geom_density_ridges() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") + scale_x_log10() + facet_grid(. ~ flag)
eth_data_real_date |> group_by(flag) |> ggplot(aes(total_transaction_count, fill = flag)) + geom_density_ridges() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") + scale_y_log10() + facet_grid(. ~ flag)
eth_data_real_date |> filter(!is.infinite(total_transaction_count)) |> group_by(flag) |> ggplot(aes(total_transaction_count, fill = flag)) + geom_density_ridges() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") + scale_x_log10() + facet_grid(. ~ flag)
eth_data_real_date |> filter(!is.infinite(total_transaction_count)) |> group_by(flag) |> ggplot(aes(total_transaction_count, fill = flag)) + geom_density() + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") + scale_x_log10() + facet_grid(. ~ flag)
eth_data_real_date |> filter(!is.infinite(total_transaction_count)) |> group_by(flag) |> ggplot(aes(total_transaction_count, fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") + scale_x_log10()
knitr::opts_chunk$set(echo = TRUE)
grid.arrange(tx_cnt_plot, send_amt_plot, nrow = 2)
# Transaction Count (Histogram)
eth_data_real_date |> group_by(flag) |>
ggplot(aes(total_transaction_count, fill = flag)) +
geom_histogram(binwidth = 0.5, bins = 30) +
labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  +
scale_fill_manual(values = c("#0DBFC4", "#F8786D")) +
theme(legend.position = "bottom") + scale_x_log10() +
facet_grid(. ~ flag)
# Transaction Count (Density)
eth_data_real_date |> filter(!is.infinite(total_transaction_count)) |>
group_by(flag) |> ggplot(aes(total_transaction_count, fill = flag)) +
geom_density(alpha = 0.7) +
labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  +
scale_fill_manual(values = c("#0DBFC4", "#F8786D")) +
theme(legend.position = "bottom") + scale_x_log10()
mean(eth_data_real_date$total_transaction_count)
eth_data_real_date |> filter(total_transaction_count != transactionCount) |> head()
eth_data_real_date |> filter(total_transaction_count == transactionCount) |> head()
eth_data_real_date |> filter(total_transaction_count == transactionCount) |> select(total_transaction_count, transactionCount) |> head()
eth_data_real_date$time_between_first_and_last_tx |> head()
eth_data_real_date |> select(time_between_first_and_last_tx)
eth_data_real_date |> mutate(test = lastTx - firstTx) |> select(test) |> head()
eth_data_real_date |> mutate(test = (lastTx - firstTx)/60) |> select(test) |> head()
eth_data_real_date |> mutate(test = (lastTx - firstTx)) |> select(test) |> head()
eth_data_real_date |> mutate(test = (lastTx - firstTx)) |> select(test, firstTx) |> head()
# Load the packages.
library(tidyverse)
library(ggplot2)
library(gridExtra)
eth_data_test <- read_csv("/Users/idea/Documents/FYP/01 Data Collection/04 Final Usable Data/eth_data_real_date.csv")
eth_data_test <- eth_data_test |> mutate(flag = factor(flag))
class(eth_data_test$firstTx)
eth_tx_date
eth_data_real_date <- inner_join(eth_data_real_date, eth_tx_date, by = "index")
eth_data_real_date$firstTransactionTime.x
eth_data_real_date$firstTransactionTime.y
eth_data_test$firstTransactionTime
eth_data_test
eth_data_test |> mutate(diff = lastTx - firstTx) |> select(diff)
eth_data_test |> mutate(diff = (lastTx - firstTx), diff_min = minute(lastTx - firstTx)) |> select(diff, diff_min)
eth_data_test |> mutate(diff = (lastTx - firstTx), diff_min = minute(seconds_to_period(lastTx - firstTx))) |> select(diff, diff_min)
eth_data_test |> mutate(diff = (lastTx - firstTx), diff_min = minute(seconds_to_period(lastTx - firstTx))) |> select(diff, diff_min) |> class()
eth_data_test |> mutate(diff = (lastTx - firstTx) |>
group_by(flag) |> ggplot(aes(diff, fill = flag)) +
geom_density(alpha = 0.7) +
labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  +
scale_fill_manual(values = c("#0DBFC4", "#F8786D")) +
theme(legend.position = "bottom") + scale_x_log10()
eth_data_test |> mutate(diff = (lastTx - firstTx) |> group_by(flag) |> ggplot(aes(diff, fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  +scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") + scale_x_log10()
eth_data_test |> mutate(diff = (lastTx - firstTx) |> group_by(flag) |> ggplot(aes(diff, fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") + scale_x_log10()
eth_data_test |> mutate(diff = (lastTx - firstTx) |> group_by(flag)
eth_data_test |> mutate(diff = (lastTx - firstTx)) |> group_by(flag) |> ggplot(aes(diff, fill = flag)) + geom_density(alpha = 0.7) + labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom") + scale_x_log10()
eth_data_test |> mutate(diff = (lastTx - firstTx), diff_min = difftime(lastTx, firstTx, unit="mins") |> select(diff, diff_min)
eth_data_test |> mutate(diff = (lastTx - firstTx), diff_min = difftime(lastTx, firstTx, unit="mins")) |> select(diff, diff_min)
144735643/60
eth_data_test |> mutate(diff = (lastTx - firstTx), diff_min = difftime(lastTx, firstTx, unit="mins")) |> select(diff, diff_min) |> arrange(diff_min)
eth_data_test |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.6) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
first_tx_plot <- eth_data_test |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.6) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
last_tx_plot <- eth_data_test |> group_by(flag) |> ggplot(aes(lastTx, fill = flag)) + geom_density(alpha = 0.6) + labs(title = "Distribution of Last Transaction time by Types of account", x = "Last Transaction Time", y = "Density", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
grid.arrange(tx_cnt_plot, send_amt_plot, nrow = 2)
first_tx_plot <- eth_data_test |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.6) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
last_tx_plot <- eth_data_test |> group_by(flag) |> ggplot(aes(lastTx, fill = flag)) + geom_density(alpha = 0.6) + labs(title = "Distribution of Last Transaction time by Types of account", x = "Last Transaction Time", y = "Density", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
grid.arrange(tx_cnt_plot, send_amt_plot, nrow = 2)
first_tx_plot <- eth_data_test |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.6) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
last_tx_plot <- eth_data_test |> group_by(flag) |> ggplot(aes(lastTx, fill = flag)) + geom_density(alpha = 0.6) + labs(title = "Distribution of Last Transaction time by Types of account", x = "Last Transaction Time", y = "Density", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
grid.arrange(tx_cnt_plot, send_amt_plot, nrow = 2)
first_tx_plot <- eth_data_test |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.6) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
last_tx_plot <- eth_data_test |> group_by(flag) |> ggplot(aes(lastTx, fill = flag)) + geom_density(alpha = 0.6) + labs(title = "Distribution of Last Transaction time by Types of account", x = "Last Transaction Time", y = "Density", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
grid.arrange(first_tx_plot, last_tx_plot, nrow = 2)
first_tx_plot <- eth_data_test |> group_by(flag) |> ggplot(aes(firstTx, fill = flag)) + geom_density(alpha = 0.6) + labs(title = "Distribution of First Transaction time by Types of account", x = "First Transaction Time", y = "Density", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
last_tx_plot <- eth_data_test |> group_by(flag) |> ggplot(aes(lastTx, fill = flag)) + geom_density(alpha = 0.6) + labs(title = "Distribution of Last Transaction time by Types of account", x = "Last Transaction Time", y = "Density", fill = "Account Types")  + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "bottom")
grid.arrange(first_tx_plot, last_tx_plot, ncol = 2)
tx_cnt_plot <- eth_data_test |> group_by(flag) |>
ggplot(aes(x = flag, y = total_transaction_count, fill = flag)) +
geom_boxplot() +
labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "Transaction count", fill = "Account Types")  +
scale_fill_manual(values = c("#0DBFC4", "#F8786D")) +
scale_y_log10() + coord_flip() + theme(legend.position = "bottom")
# Send Amount
send_amt_plot <- eth_data_test |> group_by(flag) |>
ggplot(aes(x = flag, y = sendAmount, fill = flag)) +
geom_boxplot(alpha = 0.7) +
labs(title = "Distribution of Send Amount by Types of account", x = "Types of Accounts", y = "Send Amount", fill = "Account Types")  +
scale_fill_manual(values = c("#0DBFC4", "#F8786D")) +
scale_y_log10() + coord_flip() + theme(legend.position = "bottom")
grid.arrange(tx_cnt_plot, send_amt_plot, ncol = 2)
# Transaction Count (Histogram)
eth_data_test |> group_by(flag) |>
ggplot(aes(total_transaction_count, fill = flag)) +
geom_histogram(binwidth = 0.5, bins = 30) +
labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "log10(Transaction count)", fill = "Account Types")  +
scale_fill_manual(values = c("#0DBFC4", "#F8786D")) +
theme(legend.position = "bottom") + scale_x_log10() +
facet_grid(. ~ flag)
# Transaction Count (Density)
eth_data_test |> filter(!is.infinite(total_transaction_count)) |>
group_by(flag) |> ggplot(aes(total_transaction_count, fill = flag)) +
geom_density(alpha = 0.7) +
labs(title = "Distribution of Transaction count by Types of account", x = "Types of Accounts", y = "log10(Transaction count)", fill = "Account Types")  +
scale_fill_manual(values = c("#0DBFC4", "#F8786D")) +
theme(legend.position = "bottom") + scale_x_log10()
setwd("/Users/idea/Documents/FYP/02 Model training/01 Test Result/03 Clustering")
library(tideverse)
library(tidyverse)
library(ggplot2)
dbs <- read_csv("DBSCAN_hyperparam.csv")
dbs
dbs <- filter(`_clusters` <= 2)
dbs <- dbs |> filter(`_clusters` <= 2)
dbs <- dbs |> filter(`_clusters` >= 2)
dbs <- dbs |> filter(`_clusters` >= 2)
dbs <- read_csv("DBSCAN_hyperparam.csv")
dbs |> filter(`_clusters` <= 2)
dbs |> filter(`_clusters` <= 5)
dbs_new <- read_csv("DBSCAN_hyperparam_new.csv")
dbs_new |> top_n(1, sil_score)
dbs_new |> arrange(desc(sil_score))
dbs_new |> arrange(desc(sil_score), davies_score)
dbs |> top_n(1, sil_score)
mean(dbs$sil_score)
mean(dbs_new$sil_score)
mean(dbs$davies_score)
mean(dbs_new$davies_score)
km <- read_csv("KMeans_cluster_info.csv")
km
km |> filter(flag == 1)
km |> filter(flag == 1) |> group_by(cluster_gp)
km |> filter(flag == 1) |> count(cluster_gp)
km |> count(cluster_gp)
km |> count(cluster_gp, flag)
km |> count(cluster_gp, flag) |> group_by(cluster_gp) |> mutate(sum = sum(n))
km |> count(cluster_gp, flag) |> group_by(cluster_gp) |> mutate(sum = sum(n)) |> ungroup() |> filter(flag == 1) |> group_by(cluster_gp) |> mutate(percent = n / sum * 100)
km |> count(cluster_gp, flag) |> group_by(cluster_gp) |> mutate(sum = sum(n)) |> ungroup() |> filter(flag == 1) |> group_by(cluster_gp) |> mutate(percent = n / sum * 100) |> select(cluster_gp, sum, percent)
km_percent <- km |> count(cluster_gp, flag) |> group_by(cluster_gp) |> mutate(sum = sum(n)) |> ungroup() |> filter(flag == 1) |> group_by(cluster_gp) |> mutate(percent = n / sum * 100) |> select(cluster_gp, sum, percent)
km_percent |> ggplot(aes(cluster_gp, percent)) + geom_col(fill = cluster_gp)
km_percent |> ggplot(aes(cluster_gp, percent)) + geom_col(fill = cluster_gp)
km_percent
km_percent |> ggplot(aes(cluster_gp, percent)) + geom_col()
km_percent <- km_percent |> mutate(cluster_gp = factor(cluster_gp))
km_percent |> ggplot(aes(cluster_gp, percent), fill = cluster_gp) + geom_col()
km_percent
km_percent |> ggplot(aes(cluster_gp, percent), col = cluster_gp) + geom_col()
km_percent |> ggplot(aes(cluster_gp, percent, fill = cluster_gp) + geom_col()
km_percent |> ggplot(aes(cluster_gp, percent, fill = cluster_gp)) + geom_col()
km_percent |> arran(desc(percent)) |> ggplot(aes(cluster_gp, percent, fill = cluster_gp)) + geom_col()
km_percent |> arrange(desc(percent)) |> ggplot(aes(cluster_gp, percent, fill = cluster_gp)) + geom_col()
km_percent |> arrange(desc(percent))
km_percent |> ggplot(aes(cluster_gp, reorder(percent), fill = cluster_gp)) + geom_col()
km_percent |> mutate(cluster_gp = reorder(cluster_gp, percent)) |> ggplot(aes(cluster_gp, percent, fill = cluster_gp)) + geom_col()
km_percent |> mutate(cluster_gp = reorder(cluster_gp, percent)) |> ggplot(aes(cluster_gp, percent)) + geom_col()
knitr::opts_chunk$set(echo = TRUE)
# Load the packages.
library(tidyverse)
library(ggplot2)
library(gridExtra)
km <- read_csv("KMeans_cluster_info.csv")
km_percent <- km |> count(cluster_gp, flag) |> group_by(cluster_gp) |> mutate(sum = sum(n)) |> ungroup() |> filter(flag == 1) |> group_by(cluster_gp) |> mutate(percent = n / sum * 100) |> select(cluster_gp, sum, percent)
km_percent |> mutate(cluster_gp = reorder(cluster_gp, percent)) |> ggplot(aes(cluster_gp, percent)) + geom_col()
# Load the packages.
library(tidyverse)
library(ggplot2)
library(gridExtra)
km <- read_csv("KMeans_cluster_info.csv")
km_percent <- km |> count(cluster_gp, flag) |> group_by(cluster_gp) |> mutate(sum = sum(n)) |> ungroup() |> filter(flag == 1) |> group_by(cluster_gp) |> mutate(percent = n / sum * 100) |> select(cluster_gp, sum, percent)
km_percent |> mutate(cluster_gp = reorder(cluster_gp, percent)) |> ggplot(aes(cluster_gp, percent)) + geom_col() + labs(x = "Clusters", y = "Percentage of illicit accounts (%)", title = "Perentage of illicit account in K-Means Clusters")
knitr::opts_chunk$set(echo = TRUE)
# Load the packages.
library(tidyverse)
library(ggplot2)
library(gridExtra)
hier <- read_csv("Hierarchical Cluster_cluster_info.csv")
hier_percent <- hier |> count(cluster_gp, flag) |> group_by(cluster_gp) |> mutate(sum = sum(n)) |> ungroup() |> filter(flag == 1) |> group_by(cluster_gp) |> mutate(percent = n / sum * 100) |> select(cluster_gp, sum, percent)
hier_percent |> mutate(cluster_gp = reorder(cluster_gp, percent)) |> ggplot(aes(cluster_gp, percent, fill = "blue")) + geom_col() + labs(x = "Clusters", y = "Percentage of illicit accounts (%)", title = "Percentage of illicit account in K-Means Clusters") + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "none")
km <- read_csv("KMeans_cluster_info.csv")
km_percent <- km |> count(cluster_gp, flag) |> group_by(cluster_gp) |> mutate(sum = sum(n)) |> ungroup() |> filter(flag == 1) |> group_by(cluster_gp) |> mutate(percent = n / sum * 100) |> select(cluster_gp, sum, percent)
km_percent |> mutate(cluster_gp = reorder(cluster_gp, percent)) |> ggplot(aes(cluster_gp, percent, fill = "blue")) + geom_col() + labs(x = "Clusters", y = "Percentage of illicit accounts (%)", title = "Percentage of illicit account in K-Means Clusters") + scale_fill_manual(values = c("#0DBFC4", "#F8786D")) + theme(legend.position = "none")
hier
levels(hier$cluster_gp)
levels(factor(hier$cluster_gp))
hier |> count(cluster_gp, flag) |> group_by(cluster_gp) |> mutate(sum = sum(n)) |> ungroup() |> filter(flag == 1) |> group_by(cluster_gp) |> mutate(percent = n / sum * 100) |> select(cluster_gp, sum, percent)
hier |> count(cluster_gp, flag)
